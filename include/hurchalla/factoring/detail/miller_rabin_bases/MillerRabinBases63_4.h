// Copyright (c) 2020-2022 Jeffrey Hurchalla.
/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */

#ifndef HURCHALLA_FACTORING_MILLER_RABIN_BASES63_4_H_INCLUDED
#define HURCHALLA_FACTORING_MILLER_RABIN_BASES63_4_H_INCLUDED


#include "hurchalla/factoring/detail/miller_rabin_bases/MillerRabinBases.h"
#include "hurchalla/util/programming_by_contract.h"
#include "hurchalla/util/compiler_macros.h"
#include <cstdint>
#include <cstddef>
#include <type_traits>
#include <array>

namespace hurchalla { namespace detail {


// This 2048 byte hash table lets you determine the primality of any unsigned
// int number less than (1<<63), via miller-rabin primality testing using 4
// bases.
// This test permits numbers that are even, as well as of course odd numbers.
// Note however that montgomery arithmetic (which is one way to implement the
// miller-rabin test) always requires odds.

// see MillerRabinBases.h for why this template uses a DUMMY parameter.
template <typename DUMMY>
struct MillerRabinBases<63, 4, DUMMY> {
    static_assert(std::is_same<DUMMY, void>::value, "");
public:
    // 'num' is the unsigned 64 bit number being tested for primality.
    // As a precondition, 'num' must be less than (1<<63).
    // This function returns 4 bases that can be used by miller-rabin testing
    // to correctly determine (non-probabilistically) the primality of num.
    static HURCHALLA_FORCE_INLINE
    std::array<std::uint16_t, 4> get(std::uint64_t num)
    {
        HPBC_PRECONDITION2(num < (static_cast<std::uint64_t>(1) << 63));
        // I generated/verified the hash table and bases.  See README.TXT
        using std::uint32_t;
        std::array<std::uint16_t, 4> bases;
        bases[0] = 2;
        bases[1] = 15;
        uint32_t hash_bucket = static_cast<uint32_t>(num) >> 23;
        bases[2] = table[hash_bucket][0];
        bases[3] = table[hash_bucket][1];
        return bases;
    }
private:
    static constexpr std::size_t SIZE = 512;
#if defined(__INTEL_COMPILER) || defined(_MSC_VER)
    // unless array size is explicit, icc and msvc fail on sizeof() later
    static constexpr std::uint16_t table[SIZE][2] = {
#else
    static constexpr std::uint16_t table[][2] = {
#endif
        { 19573, 32970 },
        { 53428, 21080 },
        { 58719, 47741 },
        { 42237, 60043 },
        { 48406, 12088 },
        { 61795, 17158 },
        {  2808,   476 },
        {  4693, 48010 },
        { 24441, 39598 },
        { 39222, 26089 },
        { 37818, 18643 },
        { 60611, 57903 },
        { 49972, 47999 },
        { 35365, 10282 },
        { 27133, 56839 },
        { 20631, 15865 },
        { 36743, 37418 },
        { 26901, 19875 },
        {    52, 60607 },
        { 19573, 30952 },
        { 36760, 26455 },
        { 33491, 56280 },
        { 46883, 62766 },
        { 37989, 58801 },
        { 49410, 35359 },
        { 58845, 64547 },
        { 39063, 31022 },
        { 29952, 43781 },
        { 27508, 22865 },
        { 35100, 23527 },
        { 20148, 33284 },
        {  8424, 25223 },
        { 62377, 48091 },
        { 64706, 53564 },
        { 55742, 12686 },
        { 27682, 28634 },
        { 12261, 22460 },
        {  9319, 25955 },
        { 30184, 17972 },
        {  4453, 17324 },
        { 29952, 19570 },
        {  6318, 53697 },
        { 48951, 63870 },
        {    52, 58169 },
        { 37005,  6818 },
        { 24375, 62723 },
        { 57661, 59992 },
        { 19709, 14586 },
        { 54805, 55190 },
        {  3757, 33401 },
        {  4212, 33555 },
        { 19256, 23778 },
        {  4693, 37087 },
        { 14306, 55197 },
        { 58357, 48596 },
        { 48251, 64858 },
        { 39888, 55294 },
        { 15726, 55431 },
        { 50935, 26451 },
        { 48447, 42371 },
        { 29212,  5392 },
        { 25289, 13761 },
        { 24986, 35147 },
        { 45864, 61297 },
        { 55599, 19388 },
        { 63797, 32253 },
        { 36517, 60122 },
        { 13754, 57140 },
        {  3900, 62597 },
        { 59964, 46679 },
        {  1647, 58574 },
        { 12082, 18549 },
        { 48373, 45509 },
        { 65334,  5308 },
        { 33325, 65315 },
        { 45133, 43139 },
        { 40875,  5237 },
        { 45973, 64026 },
        { 17797, 20126 },
        { 29920, 26484 },
        { 24986, 58830 },
        { 30422, 26243 },
        {  4212, 17196 },
        { 23329, 44385 },
        { 24427, 40501 },
        { 37994, 25941 },
        { 38151, 44918 },
        { 50543, 55830 },
        { 53688, 11152 },
        { 30829, 46458 },
        { 13832, 58685 },
        { 56363, 18667 },
        { 32441, 58794 },
        { 34111, 42797 },
        { 14275, 37045 },
        { 41867, 54051 },
        { 23213, 43558 },
        { 51279,  6086 },
        { 17341, 58735 },
        { 55573, 11302 },
        { 44606, 27853 },
        { 59166, 14971 },
        { 44631, 28356 },
        { 16826, 36214 },
        { 12407, 35434 },
        {  1755, 58508 },
        {  1635, 59958 },
        { 39146, 57720 },
        { 43317, 34771 },
        { 28717, 56927 },
        { 32500, 30249 },
        { 30406, 42811 },
        { 33813, 34657 },
        { 35868, 50097 },
        {  4693, 29686 },
        {  8943, 35495 },
        { 63180, 55858 },
        { 22621, 46461 },
        { 65533, 42397 },
        { 26973, 36226 },
        { 36517, 36248 },
        { 39325, 35298 },
        { 20737, 36308 },
        { 57661, 60765 },
        { 21472, 22042 },
        { 44668, 59799 },
        {  6997, 58484 },
        {  1455, 41524 },
        {  9639, 15522 },
        { 34526, 44189 },
        {  1525, 19097 },
        {  7800, 23335 },
        { 42719, 49987 },
        {  3757, 62307 },
        { 26026, 63050 },
        {  7099, 62440 },
        { 24037, 43885 },
        { 21866, 18453 },
        { 49775, 50966 },
        {  1813,  6501 },
        {    52, 25681 },
        { 31213, 26398 },
        {   637, 12190 },
        {  8235, 10819 },
        { 13636, 64874 },
        {  3978, 54018 },
        { 22195, 43475 },
        { 20410, 24033 },
        { 21658, 17487 },
        { 11550, 33077 },
        { 42237, 43250 },
        { 15400, 40819 },
        { 23106, 60518 },
        { 64141, 40431 },
        {  6292, 41679 },
        { 53391, 36685 },
        { 17818, 16197 },
        { 35520, 46367 },
        { 53367,  4370 },
        { 18587, 41545 },
        { 59430, 45590 },
        { 39623, 44394 },
        { 15925, 47834 },
        {  4934, 32491 },
        {  1755, 62575 },
        { 19646, 23730 },
        { 61000, 62166 },
        { 31213, 52467 },
        { 51597,  7039 },
        { 53802, 58631 },
        { 24037, 32098 },
        { 13390, 51190 },
        { 44715, 34460 },
        {  7278, 62261 },
        {  8954, 40924 },
        { 47775, 25437 },
        { 17128, 13906 },
        { 63936, 39967 },
        { 10071, 62875 },
        { 14376, 59072 },
        { 22879, 62212 },
        { 29952, 18782 },
        { 25435, 39722 },
        { 25012,  2273 },
        { 11550, 42959 },
        { 48519, 38714 },
        { 33510, 33772 },
        { 44911, 44345 },
        { 64695, 27583 },
        { 37908, 13589 },
        { 52055, 28622 },
        { 34650, 55219 },
        { 42873, 16330 },
        { 12125, 54995 },
        { 27874,  6673 },
        { 55609, 22027 },
        { 28637, 20306 },
        { 42624, 17294 },
        { 35809,  8189 },
        { 39325, 35199 },
        { 41039, 59736 },
        { 64941, 29098 },
        { 61830, 55603 },
        { 34359, 31841 },
        { 33813, 64755 },
        {  4625, 43817 },
        { 11688, 27514 },
        { 17199, 46322 },
        { 55162, 56655 },
        {  1755, 54870 },
        { 20130, 44837 },
        { 18643, 58681 },
        { 14014, 28135 },
        { 23179, 54005 },
        { 51197, 32524 },
        { 58357, 13833 },
        { 61893, 22131 },
        { 52952, 60675 },
        { 46930, 55478 },
        { 18759, 44334 },
        { 62023, 34444 },
        { 49279, 65366 },
        { 17199, 31187 },
        { 15714, 53543 },
        {  6765,  3986 },
        { 53830, 36044 },
        {  4719, 19841 },
        { 13965, 50934 },
        { 27508, 32461 },
        { 42390, 24890 },
        { 12740, 31127 },
        { 49356, 54499 },
        { 55191, 39431 },
        { 45253, 28863 },
        { 32786, 54223 },
        { 43983, 49510 },
        {  3900, 55993 },
        { 24037, 46340 },
        {  2896, 36118 },
        { 32500, 49360 },
        { 21866, 53732 },
        { 19773, 60741 },
        { 47298, 38500 },
        { 64695, 58339 },
        { 48074, 18536 },
        { 63941, 18659 },
        { 24674, 60054 },
        { 31981, 44740 },
        { 18341,  5762 },
        { 21045, 49555 },
        { 32545, 31733 },
        { 33202, 48367 },
        { 57434, 50294 },
        { 33300, 64261 },
        { 45133, 46894 },
        { 20917, 20795 },
        { 58357, 24753 },
        { 13404, 29143 },
        { 42098, 42189 },
        { 31213, 64567 },
        { 27925, 27250 },
        { 26132, 58485 },
        { 39888, 52950 },
        { 35557, 57730 },
        { 32500, 57694 },
        { 48074,  7029 },
        { 28875, 16439 },
        { 17786, 22361 },
        { 10672, 32770 },
        { 37908, 31037 },
        {  5265, 12424 },
        {  9564, 42939 },
        {  1155, 20222 },
        { 40875, 41481 },
        { 37743, 27395 },
        {  7625, 48519 },
        { 12163, 15539 },
        { 60442, 33477 },
        { 38125, 64370 },
        { 46378, 32983 },
        { 60050, 47734 },
        { 11271, 58402 },
        { 32760, 59843 },
        { 29483, 23347 },
        { 54925, 23701 },
        { 22932, 63066 },
        { 19520, 29962 },
        { 52650, 32067 },
        { 36517, 45635 },
        { 46507, 34869 },
        { 23873, 28198 },
        { 36816, 47887 },
        {  1740, 64770 },
        { 45253, 37113 },
        { 22875, 51233 },
        { 10693, 22254 },
        { 38837, 51215 },
        { 18995, 37020 },
        { 63180, 52550 },
        { 42624, 26921 },
        { 65533, 14486 },
        { 60611, 32049 },
        { 23169, 54262 },
        { 52893, 25481 },
        { 56689, 30734 },
        { 47683, 43657 },
        { 62426, 59181 },
        { 23240, 37186 },
        { 59200, 47130 },
        { 39439, 11841 },
        { 42465, 31151 },
        { 52583, 30611 },
        { 21386, 33366 },
        {  5154, 19451 },
        { 46846, 30113 },
        { 17098, 37154 },
        { 35458, 32089 },
        { 24678, 44670 },
        { 65214, 55043 },
        { 23291, 54142 },
        {  4453, 60056 },
        { 55014, 30980 },
        { 29382, 47181 },
        { 33630, 30143 },
        { 16836, 38262 },
        { 27750, 52597 },
        {  3757, 12707 },
        { 33813,  9052 },
        { 32694, 41985 },
        { 46907, 55494 },
        { 23360, 26027 },
        {  4262, 48045 },
        {  3490, 22862 },
        { 27766, 34726 },
        { 62197, 62287 },
        { 49123, 19793 },
        { 18720, 51427 },
        { 14094, 16745 },
        { 52248, 48839 },
        { 56707, 19355 },
        { 29531,  7418 },
        { 46181, 27454 },
        { 10722, 64322 },
        { 22190, 16457 },
        { 63738, 32989 },
        {  5534, 25106 },
        { 43774, 23529 },
        { 12419, 23155 },
        {  3250, 40123 },
        { 52461, 30263 },
        { 55400, 58580 },
        { 12574, 18497 },
        {  6292, 27361 },
        { 46930, 10728 },
        { 53814, 65411 },
        { 63738, 28187 },
        { 55594, 52259 },
        { 12522, 53926 },
        { 28717,  1484 },
        { 55326, 42357 },
        { 41962, 30399 },
        { 65004, 55476 },
        { 45253, 16984 },
        { 20353, 47406 },
        { 38125, 35191 },
        { 31850, 47386 },
        { 14079, 62874 },
        { 31213, 23675 },
        { 21497, 39197 },
        { 41497, 20821 },
        { 28543, 30030 },
        { 37369, 64832 },
        {  8829, 24767 },
        { 39325, 17380 },
        {  4440, 22850 },
        {   637, 36593 },
        { 48942, 47955 },
        { 46930, 45077 },
        {  7865, 60825 },
        { 20576, 65487 },
        { 21853, 16835 },
        { 48373, 59144 },
        { 34346,   139 },
        { 57567, 48021 },
        { 27750, 30357 },
        { 48373, 27087 },
        { 35414, 44605 },
        {  3900, 63822 },
        { 59491, 39013 },
        { 39945, 51546 },
        { 23197, 56889 },
        { 12052, 38059 },
        { 43738,  9997 },
        { 16893, 61811 },
        { 54745, 42749 },
        { 24986, 61024 },
        { 36605,  5285 },
        { 64401, 44191 },
        { 48541, 31846 },
        { 30333, 38662 },
        {  2061, 23931 },
        { 61907,  7620 },
        { 51881, 23135 },
        { 38737, 49130 },
        { 41905, 20961 },
        { 56355, 63348 },
        { 40061, 24777 },
        { 24830,  9586 },
        { 65533, 37130 },
        { 37005, 22749 },
        { 40254, 40251 },
        { 27985, 26953 },
        { 43732, 36014 },
        { 29952, 58919 },
        { 53947, 41555 },
        { 38210, 35064 },
        {  4440, 20431 },
        { 62558,  5599 },
        {  1098, 36453 },
        { 64850, 42732 },
        { 48026, 56869 },
        { 60274, 17686 },
        { 11539, 62129 },
        { 36820, 59072 },
        { 23465, 28783 },
        { 43732, 57580 },
        { 49887, 33734 },
        { 65533, 61699 },
        { 15925, 28595 },
        { 44055, 36989 },
        { 54997, 18415 },
        { 33510, 60486 },
        { 27718, 18998 },
        { 44200, 39519 },
        { 54665, 62695 },
        { 19520, 62931 },
        { 47298, 36406 },
        { 34774, 44947 },
        { 45253, 53592 },
        {  7076, 35620 },
        { 20797, 55755 },
        { 10852,  7699 },
        { 31206, 56034 },
        { 20103, 59072 },
        { 33743, 59035 },
        { 37964, 32186 },
        { 65467, 54557 },
        { 16470, 49839 },
        { 20226, 39515 },
        { 10950, 21300 },
        { 55048, 50813 },
        { 41262, 37834 },
        {  1714, 17422 },
        {  9037, 20922 },
        { 58118, 41090 },
        { 44770, 60831 },
        { 18742, 21883 },
        { 62425, 32871 },
        { 31213, 19259 },
        {  7865, 28293 },
        { 52887, 32796 },
        {  6970, 57045 },
        { 56277, 45819 },
        { 36218, 21705 },
        { 40001, 56794 },
        {  1071, 18526 },
        { 63797, 30827 },
        { 44292,  6226 },
        {   637, 22771 },
        { 18123, 32546 },
        { 34007, 31961 },
        { 63585, 23509 },
        { 53109, 40475 },
        { 15238, 31521 },
        { 23595, 47145 },
        { 64987, 27863 },
        { 63339, 28191 },
        { 20403, 23897 },
        { 56595, 51113 },
        { 24037, 19122 },
        {  2978, 29446 },
        {  1647, 17871 },
        { 21312, 51151 },
        {  9150, 32305 },
        { 54925, 41324 },
        { 23474, 37647 },
        { 29019, 47116 },
        { 50071, 30297 },
        { 59560, 63647 },
        { 62561, 22394 },
        { 43706, 65290 },
        { 39444, 43815 },
        {  2577, 12315 },
        { 10071, 35450 },
        {  3757, 17254 },
        { 43732, 22647 },
        { 28752, 48863 },
        { 62820,  8943 },
        { 13754, 56871 },
        { 26119, 31409 },
        { 52461, 52401 },
        { 58031, 39487 },
        { 48373, 14124 },
        { 11988, 62209 },
        { 56227, 40078 },
        { 41217, 59866 },
        { 52251,  3121 },
        { 22385, 38136 },
        { 55239, 13773 },
        { 10530, 52584 },
        { 38680,  6264 },
        { 56878, 20240 }
    };
    static_assert(sizeof(table)/sizeof(table[0]) == SIZE, "");
    static_assert(sizeof(table[0])/sizeof(table[0][0]) == 2u, "");
    static_assert(sizeof(table)/sizeof(table[0][0]) == SIZE*2, "");
};
template <typename DUMMY>
constexpr std::size_t MillerRabinBases<63, 4, DUMMY>::SIZE;
template <typename DUMMY>
constexpr std::uint16_t MillerRabinBases<63, 4, DUMMY>::table[][2];


}}  // end namespace

#endif
