# This is a basic workflow that is manually triggered

name: Manual benchmark

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  #other potential flags for CXX_FLAGS are  -DHURCHALLA_AVOID_CSELECT=1 -DHURCHALLA_ALLOW_INLINE_ASM_ALL=1
  #-DHURCHALLA_POLLARD_RHO_TRIAL_FUNCTOR_NAME=1
  CXX_FLAGS: "-std=c++17  -DHURCHALLA_POLLARD_RHO_TRIAL_FUNCTOR_NAME=PollardRhoBrentSwitchingTrial"

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type

      #-DCMAKE_CXX_COMPILER=clang++-10
      run: cmake -B ${{github.workspace}}/build  -DBENCH_HURCHALLA_FACTORING=ON  -DTEST_HURCHALLA_FACTORING=OFF  -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}  -DCMAKE_CXX_FLAGS=${{env.CXX_FLAGS}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Benchmark Factoring
      working-directory: ${{github.workspace}}/build
      run: ./bench_hurchalla_factoring
